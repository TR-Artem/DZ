// 1. Интерфейс IPaymentProcessor
public interface IPaymentProcessor
{
    bool ProcessPayment(decimal amount);
    bool RefundPayment(decimal amount, string transactionId);
}

// 2. Интерфейс IPaymentValidator
public interface IPaymentValidator
{
    bool ValidatePayment(decimal amount);
}

// 3. Реализация процессоров оплаты
public class PayPalProcessor : IPaymentProcessor
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Processing PayPal payment for {amount} USD");
        return true; // В реальности здесь была бы логика подключения к API PayPal
    }

    public bool RefundPayment(decimal amount, string transactionId)
    {
        Console.WriteLine($"Refunding {amount} USD via PayPal for transaction {transactionId}");
        return true;
    }
}

public class CreditCardProcessor : IPaymentProcessor, IPaymentValidator
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Processing credit card payment for {amount} USD");
        return true;
    }

    public bool RefundPayment(decimal amount, string transactionId)
    {
        Console.WriteLine($"Refunding {amount} USD to credit card for transaction {transactionId}");
        return true;
    }

    public bool ValidatePayment(decimal amount)
    {
        if (amount <= 0)
        {
            Console.WriteLine("Payment amount must be positive");
            return false;
        }
        return true;
    }
}

public class CryptoCurrencyProcessor : IPaymentProcessor
{
    public bool ProcessPayment(decimal amount)
    {
        Console.WriteLine($"Processing cryptocurrency payment for {amount} USD equivalent");
        return true;
    }

    public bool RefundPayment(decimal amount, string transactionId)
    {
        Console.WriteLine($"Refunding {amount} USD equivalent in cryptocurrency for transaction {transactionId}");
        return true;
    }
}

// 4. Класс PaymentService
public class PaymentService
{
    private readonly IPaymentProcessor _paymentProcessor;
    private readonly IPaymentValidator _paymentValidator;

    public PaymentService(IPaymentProcessor paymentProcessor, IPaymentValidator paymentValidator = null)
    {
        _paymentProcessor = paymentProcessor;
        _paymentValidator = paymentValidator;
    }

    public bool MakePayment(decimal amount)
    {
        if (_paymentValidator != null && !_paymentValidator.ValidatePayment(amount))
        {
            Console.WriteLine("Payment validation failed");
            return false;
        }

        return _paymentProcessor.ProcessPayment(amount);
    }

    public bool RefundPayment(decimal amount, string transactionId)
    {
        return _paymentProcessor.RefundPayment(amount, transactionId);
    }
}







// ЗАДАНИЕ 2





// 1. Абстрактный класс Reservation
public abstract class Reservation
{
    public string ReservationID { get; set; }
    public string CustomerName { get; set; }
    public DateTime StartDate { get; set; }
    public DateTime EndDate { get; set; }

    public abstract decimal CalculatePrice();

    public virtual void DisplayDetails()
    {
        Console.WriteLine($"Reservation ID: {ReservationID}");
        Console.WriteLine($"Customer: {CustomerName}");
        Console.WriteLine($"Period: {StartDate:d} - {EndDate:d}");
        Console.WriteLine($"Total price: {CalculatePrice():C}");
    }
}

// 2. Производные классы
public class HotelReservation : Reservation
{
    public string RoomType { get; set; }
    public string MealPlan { get; set; }

    public override decimal CalculatePrice()
    {
        int days = (EndDate - StartDate).Days;
        decimal basePrice = RoomType switch
        {
            "Standard" => 100m,
            "Deluxe" => 200m,
            "Suite" => 400m,
            _ => 150m
        };

        decimal mealPrice = MealPlan switch
        {
            "Breakfast" => 20m,
            "Half Board" => 50m,
            "Full Board" => 80m,
            _ => 0m
        };

        return days * (basePrice + mealPrice);
    }

    public override void DisplayDetails()
    {
        base.DisplayDetails();
        Console.WriteLine($"Room Type: {RoomType}");
        Console.WriteLine($"Meal Plan: {MealPlan}");
    }
}

public class FlightReservation : Reservation
{
    public string DepartureAirport { get; set; }
    public string ArrivalAirport { get; set; }

    public override decimal CalculatePrice()
    {
        // Простая логика расчета цены на основе расстояния
        decimal basePrice = 200m;
        decimal distanceMultiplier = Math.Abs(ArrivalAirport.GetHashCode() - DepartureAirport.GetHashCode()) % 10 + 1;
        return basePrice * distanceMultiplier;
    }

    public override void DisplayDetails()
    {
        base.DisplayDetails();
        Console.WriteLine($"Flight: {DepartureAirport} → {ArrivalAirport}");
    }
}

public class CarRentalReservation : Reservation
{
    public string CarType { get; set; }
    public bool InsuranceIncluded { get; set; }

    public override decimal CalculatePrice()
    {
        int days = (EndDate - StartDate).Days;
        decimal dailyPrice = CarType switch
        {
            "Economy" => 30m,
            "Compact" => 40m,
            "SUV" => 70m,
            "Luxury" => 120m,
            _ => 50m
        };

        decimal insurance = InsuranceIncluded ? days * 15m : 0m;
        return days * dailyPrice + insurance;
    }

    public override void DisplayDetails()
    {
        base.DisplayDetails();
        Console.WriteLine($"Car Type: {CarType}");
        Console.WriteLine($"Insurance: {(InsuranceIncluded ? "Included" : "Not included")}");
    }
}

// 3. Класс BookingSystem
public class BookingSystem
{
    private List<Reservation> _reservations = new List<Reservation>();

    public Reservation CreateReservation(string reservationType)
    {
        Reservation reservation = reservationType switch
        {
            "Hotel" => new HotelReservation(),
            "Flight" => new FlightReservation(),
            "Car" => new CarRentalReservation(),
            _ => throw new ArgumentException("Invalid reservation type")
        };

        reservation.ReservationID = Guid.NewGuid().ToString();
        _reservations.Add(reservation);
        return reservation;
    }

    public bool CancelReservation(string reservationID)
    {
        var reservation = _reservations.FirstOrDefault(r => r.ReservationID == reservationID);
        if (reservation != null)
        {
            _reservations.Remove(reservation
